/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * API version: 3.0.9
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvcapi

import (
	"encoding/json"
)

// TxDetail Parsed tx info
type TxDetail struct {
	TxDetail *BlockTx    `json:"txDetail,omitempty"`
	Inputs   *[]TxInput  `json:"inputs,omitempty"`
	Outputs  *[]TxOutput `json:"outputs,omitempty"`
}

// NewTxDetail instantiates a new TxDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTxDetail() *TxDetail {
	this := TxDetail{}
	return &this
}

// NewTxDetailWithDefaults instantiates a new TxDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxDetailWithDefaults() *TxDetail {
	this := TxDetail{}
	return &this
}

// GetTxDetail returns the TxDetail field value if set, zero value otherwise.
func (o *TxDetail) GetTxDetail() BlockTx {
	if o == nil || o.TxDetail == nil {
		var ret BlockTx
		return ret
	}
	return *o.TxDetail
}

// GetTxDetailOk returns a tuple with the TxDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxDetail) GetTxDetailOk() (*BlockTx, bool) {
	if o == nil || o.TxDetail == nil {
		return nil, false
	}
	return o.TxDetail, true
}

// HasTxDetail returns a boolean if a field has been set.
func (o *TxDetail) HasTxDetail() bool {
	if o != nil && o.TxDetail != nil {
		return true
	}

	return false
}

// SetTxDetail gets a reference to the given BlockTx and assigns it to the TxDetail field.
func (o *TxDetail) SetTxDetail(v BlockTx) {
	o.TxDetail = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *TxDetail) GetInputs() []TxInput {
	if o == nil || o.Inputs == nil {
		var ret []TxInput
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxDetail) GetInputsOk() (*[]TxInput, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *TxDetail) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []TxInput and assigns it to the Inputs field.
func (o *TxDetail) SetInputs(v []TxInput) {
	o.Inputs = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *TxDetail) GetOutputs() []TxOutput {
	if o == nil || o.Outputs == nil {
		var ret []TxOutput
		return ret
	}
	return *o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TxDetail) GetOutputsOk() (*[]TxOutput, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *TxDetail) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []TxOutput and assigns it to the Outputs field.
func (o *TxDetail) SetOutputs(v []TxOutput) {
	o.Outputs = &v
}

func (o TxDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TxDetail != nil {
		toSerialize["txDetail"] = o.TxDetail
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	return json.Marshal(toSerialize)
}

type NullableTxDetail struct {
	value *TxDetail
	isSet bool
}

func (v NullableTxDetail) Get() *TxDetail {
	return v.value
}

func (v *NullableTxDetail) Set(val *TxDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableTxDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableTxDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxDetail(val *TxDetail) *NullableTxDetail {
	return &NullableTxDetail{value: val, isSet: true}
}

func (v NullableTxDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
