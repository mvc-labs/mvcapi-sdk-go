/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * API version: 3.0.9
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvcapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// XpubApiService XpubApi service
type XpubApiService service

type ApiXpubLiteXpubAddressAddressGetRequest struct {
	ctx        _context.Context
	ApiService *XpubApiService
	xpub       string
	address    string
}

func (r ApiXpubLiteXpubAddressAddressGetRequest) Execute() (XpubAddress, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.XpubLiteXpubAddressAddressGetExecute(r)
}

/*
 * XpubLiteXpubAddressAddressGet Get xpub address type and index. Only index under /0/70 /1/30 is valid. Otherwise not found.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param xpub the requested xpub
 * @param address the requested address
 * @return ApiXpubLiteXpubAddressAddressGetRequest
 */
func (a *XpubApiService) XpubLiteXpubAddressAddressGet(ctx _context.Context, xpub string, address string) ApiXpubLiteXpubAddressAddressGetRequest {
	return ApiXpubLiteXpubAddressAddressGetRequest{
		ApiService: a,
		ctx:        ctx,
		xpub:       xpub,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return XpubAddress
 */
func (a *XpubApiService) XpubLiteXpubAddressAddressGetExecute(r ApiXpubLiteXpubAddressAddressGetRequest) (XpubAddress, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  XpubAddress
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "XpubApiService.XpubLiteXpubAddressAddressGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/xpubLite/{xpub}/address/{address}"
	localVarPath = strings.Replace(localVarPath, "{"+"xpub"+"}", _neturl.PathEscape(parameterToString(r.xpub, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiXpubLiteXpubBalanceGetRequest struct {
	ctx        _context.Context
	ApiService *XpubApiService
	xpub       string
}

func (r ApiXpubLiteXpubBalanceGetRequest) Execute() (XpubLiteBalance, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.XpubLiteXpubBalanceGetExecute(r)
}

/*
 * XpubLiteXpubBalanceGet Get xpub balances including confirmed and unconfirmed.
 * This api returns confirmed balance(same as address balance), not sumed utxos.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param xpub the xpub to search
 * @return ApiXpubLiteXpubBalanceGetRequest
 */
func (a *XpubApiService) XpubLiteXpubBalanceGet(ctx _context.Context, xpub string) ApiXpubLiteXpubBalanceGetRequest {
	return ApiXpubLiteXpubBalanceGetRequest{
		ApiService: a,
		ctx:        ctx,
		xpub:       xpub,
	}
}

/*
 * Execute executes the request
 * @return XpubLiteBalance
 */
func (a *XpubApiService) XpubLiteXpubBalanceGetExecute(r ApiXpubLiteXpubBalanceGetRequest) (XpubLiteBalance, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  XpubLiteBalance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "XpubApiService.XpubLiteXpubBalanceGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/xpubLite/{xpub}/balance"
	localVarPath = strings.Replace(localVarPath, "{"+"xpub"+"}", _neturl.PathEscape(parameterToString(r.xpub, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiXpubLiteXpubUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *XpubApiService
	xpub       string
	limit      *int32
}

func (r ApiXpubLiteXpubUtxoGetRequest) Limit(limit int32) ApiXpubLiteXpubUtxoGetRequest {
	r.limit = &limit
	return r
}

func (r ApiXpubLiteXpubUtxoGetRequest) Execute() ([]XpubUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.XpubLiteXpubUtxoGetExecute(r)
}

/*
 * XpubLiteXpubUtxoGet Get xpub utxos by specific xpub(300 per page).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param xpub the requested xpub
 * @return ApiXpubLiteXpubUtxoGetRequest
 */
func (a *XpubApiService) XpubLiteXpubUtxoGet(ctx _context.Context, xpub string) ApiXpubLiteXpubUtxoGetRequest {
	return ApiXpubLiteXpubUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		xpub:       xpub,
	}
}

/*
 * Execute executes the request
 * @return []XpubUtxo
 */
func (a *XpubApiService) XpubLiteXpubUtxoGetExecute(r ApiXpubLiteXpubUtxoGetRequest) ([]XpubUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []XpubUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "XpubApiService.XpubLiteXpubUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/xpubLite/{xpub}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"xpub"+"}", _neturl.PathEscape(parameterToString(r.xpub, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v []ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
