/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * API version: 3.0.9
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvcapi

import (
	"encoding/json"
)

// BlockTx Tx simple info for block tx list.
type BlockTx struct {
	// Transaction hash.
	Txid *string `json:"txid,omitempty"`
	// Block height of this tx.
	Height *int64 `json:"height,omitempty"`
	// Hash of the block
	BlockHash *string `json:"blockHash,omitempty"`
	// transaction size
	Size *int64 `json:"size,omitempty"`
	// Input count in this transaction
	InputCount *int32 `json:"inputCount,omitempty"`
	// Output count in this transaction.
	OutputCount *int32 `json:"outputCount,omitempty"`
	// Lock time of this transaction
	LockTime *int64 `json:"lockTime,omitempty"`
	// Trasaction fee.
	Fee *int64 `json:"fee,omitempty"`
	// Confirmations of this transaction, -1 if unconfirmed.
	Confirmations *int64 `json:"confirmations,omitempty"`
	// Block timestamp for the transaction, confirmed tx only.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// NewBlockTx instantiates a new BlockTx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockTx() *BlockTx {
	this := BlockTx{}
	return &this
}

// NewBlockTxWithDefaults instantiates a new BlockTx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockTxWithDefaults() *BlockTx {
	this := BlockTx{}
	return &this
}

// GetTxid returns the Txid field value if set, zero value otherwise.
func (o *BlockTx) GetTxid() string {
	if o == nil || o.Txid == nil {
		var ret string
		return ret
	}
	return *o.Txid
}

// GetTxidOk returns a tuple with the Txid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetTxidOk() (*string, bool) {
	if o == nil || o.Txid == nil {
		return nil, false
	}
	return o.Txid, true
}

// HasTxid returns a boolean if a field has been set.
func (o *BlockTx) HasTxid() bool {
	if o != nil && o.Txid != nil {
		return true
	}

	return false
}

// SetTxid gets a reference to the given string and assigns it to the Txid field.
func (o *BlockTx) SetTxid(v string) {
	o.Txid = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *BlockTx) GetHeight() int64 {
	if o == nil || o.Height == nil {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetHeightOk() (*int64, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *BlockTx) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *BlockTx) SetHeight(v int64) {
	o.Height = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *BlockTx) GetBlockHash() string {
	if o == nil || o.BlockHash == nil {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetBlockHashOk() (*string, bool) {
	if o == nil || o.BlockHash == nil {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *BlockTx) HasBlockHash() bool {
	if o != nil && o.BlockHash != nil {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *BlockTx) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BlockTx) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BlockTx) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *BlockTx) SetSize(v int64) {
	o.Size = &v
}

// GetInputCount returns the InputCount field value if set, zero value otherwise.
func (o *BlockTx) GetInputCount() int32 {
	if o == nil || o.InputCount == nil {
		var ret int32
		return ret
	}
	return *o.InputCount
}

// GetInputCountOk returns a tuple with the InputCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetInputCountOk() (*int32, bool) {
	if o == nil || o.InputCount == nil {
		return nil, false
	}
	return o.InputCount, true
}

// HasInputCount returns a boolean if a field has been set.
func (o *BlockTx) HasInputCount() bool {
	if o != nil && o.InputCount != nil {
		return true
	}

	return false
}

// SetInputCount gets a reference to the given int32 and assigns it to the InputCount field.
func (o *BlockTx) SetInputCount(v int32) {
	o.InputCount = &v
}

// GetOutputCount returns the OutputCount field value if set, zero value otherwise.
func (o *BlockTx) GetOutputCount() int32 {
	if o == nil || o.OutputCount == nil {
		var ret int32
		return ret
	}
	return *o.OutputCount
}

// GetOutputCountOk returns a tuple with the OutputCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetOutputCountOk() (*int32, bool) {
	if o == nil || o.OutputCount == nil {
		return nil, false
	}
	return o.OutputCount, true
}

// HasOutputCount returns a boolean if a field has been set.
func (o *BlockTx) HasOutputCount() bool {
	if o != nil && o.OutputCount != nil {
		return true
	}

	return false
}

// SetOutputCount gets a reference to the given int32 and assigns it to the OutputCount field.
func (o *BlockTx) SetOutputCount(v int32) {
	o.OutputCount = &v
}

// GetLockTime returns the LockTime field value if set, zero value otherwise.
func (o *BlockTx) GetLockTime() int64 {
	if o == nil || o.LockTime == nil {
		var ret int64
		return ret
	}
	return *o.LockTime
}

// GetLockTimeOk returns a tuple with the LockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetLockTimeOk() (*int64, bool) {
	if o == nil || o.LockTime == nil {
		return nil, false
	}
	return o.LockTime, true
}

// HasLockTime returns a boolean if a field has been set.
func (o *BlockTx) HasLockTime() bool {
	if o != nil && o.LockTime != nil {
		return true
	}

	return false
}

// SetLockTime gets a reference to the given int64 and assigns it to the LockTime field.
func (o *BlockTx) SetLockTime(v int64) {
	o.LockTime = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *BlockTx) GetFee() int64 {
	if o == nil || o.Fee == nil {
		var ret int64
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetFeeOk() (*int64, bool) {
	if o == nil || o.Fee == nil {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *BlockTx) HasFee() bool {
	if o != nil && o.Fee != nil {
		return true
	}

	return false
}

// SetFee gets a reference to the given int64 and assigns it to the Fee field.
func (o *BlockTx) SetFee(v int64) {
	o.Fee = &v
}

// GetConfirmations returns the Confirmations field value if set, zero value otherwise.
func (o *BlockTx) GetConfirmations() int64 {
	if o == nil || o.Confirmations == nil {
		var ret int64
		return ret
	}
	return *o.Confirmations
}

// GetConfirmationsOk returns a tuple with the Confirmations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetConfirmationsOk() (*int64, bool) {
	if o == nil || o.Confirmations == nil {
		return nil, false
	}
	return o.Confirmations, true
}

// HasConfirmations returns a boolean if a field has been set.
func (o *BlockTx) HasConfirmations() bool {
	if o != nil && o.Confirmations != nil {
		return true
	}

	return false
}

// SetConfirmations gets a reference to the given int64 and assigns it to the Confirmations field.
func (o *BlockTx) SetConfirmations(v int64) {
	o.Confirmations = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *BlockTx) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTx) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *BlockTx) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *BlockTx) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o BlockTx) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Txid != nil {
		toSerialize["txid"] = o.Txid
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.BlockHash != nil {
		toSerialize["blockHash"] = o.BlockHash
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.InputCount != nil {
		toSerialize["inputCount"] = o.InputCount
	}
	if o.OutputCount != nil {
		toSerialize["outputCount"] = o.OutputCount
	}
	if o.LockTime != nil {
		toSerialize["lockTime"] = o.LockTime
	}
	if o.Fee != nil {
		toSerialize["fee"] = o.Fee
	}
	if o.Confirmations != nil {
		toSerialize["confirmations"] = o.Confirmations
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableBlockTx struct {
	value *BlockTx
	isSet bool
}

func (v NullableBlockTx) Get() *BlockTx {
	return v.value
}

func (v *NullableBlockTx) Set(val *BlockTx) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockTx) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockTx(val *BlockTx) *NullableBlockTx {
	return &NullableBlockTx{value: val, isSet: true}
}

func (v NullableBlockTx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
