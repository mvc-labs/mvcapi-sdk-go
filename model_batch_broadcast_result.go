/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * API version: 3.0.9
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvcapi

import (
	"encoding/json"
)

// BatchBroadcastResult Batch broadcast result
type BatchBroadcastResult struct {
	// Already known transactions detected during processing (if there are any)
	Known *[]string `json:"known,omitempty"`
	// Transactions accepted by the mempool and then evicted due to insufficient fee (if there are any)
	Evicted *[]string `json:"evicted,omitempty"`
	// Transactions that failed to be accepted by the mempool (if there are any)
	Invalid *[]InvalidBroadCast `json:"invalid,omitempty"`
}

// NewBatchBroadcastResult instantiates a new BatchBroadcastResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchBroadcastResult() *BatchBroadcastResult {
	this := BatchBroadcastResult{}
	return &this
}

// NewBatchBroadcastResultWithDefaults instantiates a new BatchBroadcastResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchBroadcastResultWithDefaults() *BatchBroadcastResult {
	this := BatchBroadcastResult{}
	return &this
}

// GetKnown returns the Known field value if set, zero value otherwise.
func (o *BatchBroadcastResult) GetKnown() []string {
	if o == nil || o.Known == nil {
		var ret []string
		return ret
	}
	return *o.Known
}

// GetKnownOk returns a tuple with the Known field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchBroadcastResult) GetKnownOk() (*[]string, bool) {
	if o == nil || o.Known == nil {
		return nil, false
	}
	return o.Known, true
}

// HasKnown returns a boolean if a field has been set.
func (o *BatchBroadcastResult) HasKnown() bool {
	if o != nil && o.Known != nil {
		return true
	}

	return false
}

// SetKnown gets a reference to the given []string and assigns it to the Known field.
func (o *BatchBroadcastResult) SetKnown(v []string) {
	o.Known = &v
}

// GetEvicted returns the Evicted field value if set, zero value otherwise.
func (o *BatchBroadcastResult) GetEvicted() []string {
	if o == nil || o.Evicted == nil {
		var ret []string
		return ret
	}
	return *o.Evicted
}

// GetEvictedOk returns a tuple with the Evicted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchBroadcastResult) GetEvictedOk() (*[]string, bool) {
	if o == nil || o.Evicted == nil {
		return nil, false
	}
	return o.Evicted, true
}

// HasEvicted returns a boolean if a field has been set.
func (o *BatchBroadcastResult) HasEvicted() bool {
	if o != nil && o.Evicted != nil {
		return true
	}

	return false
}

// SetEvicted gets a reference to the given []string and assigns it to the Evicted field.
func (o *BatchBroadcastResult) SetEvicted(v []string) {
	o.Evicted = &v
}

// GetInvalid returns the Invalid field value if set, zero value otherwise.
func (o *BatchBroadcastResult) GetInvalid() []InvalidBroadCast {
	if o == nil || o.Invalid == nil {
		var ret []InvalidBroadCast
		return ret
	}
	return *o.Invalid
}

// GetInvalidOk returns a tuple with the Invalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchBroadcastResult) GetInvalidOk() (*[]InvalidBroadCast, bool) {
	if o == nil || o.Invalid == nil {
		return nil, false
	}
	return o.Invalid, true
}

// HasInvalid returns a boolean if a field has been set.
func (o *BatchBroadcastResult) HasInvalid() bool {
	if o != nil && o.Invalid != nil {
		return true
	}

	return false
}

// SetInvalid gets a reference to the given []InvalidBroadCast and assigns it to the Invalid field.
func (o *BatchBroadcastResult) SetInvalid(v []InvalidBroadCast) {
	o.Invalid = &v
}

func (o BatchBroadcastResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Known != nil {
		toSerialize["known"] = o.Known
	}
	if o.Evicted != nil {
		toSerialize["evicted"] = o.Evicted
	}
	if o.Invalid != nil {
		toSerialize["invalid"] = o.Invalid
	}
	return json.Marshal(toSerialize)
}

type NullableBatchBroadcastResult struct {
	value *BatchBroadcastResult
	isSet bool
}

func (v NullableBatchBroadcastResult) Get() *BatchBroadcastResult {
	return v.value
}

func (v *NullableBatchBroadcastResult) Set(val *BatchBroadcastResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchBroadcastResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchBroadcastResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchBroadcastResult(val *BatchBroadcastResult) *NullableBatchBroadcastResult {
	return &NullableBatchBroadcastResult{value: val, isSet: true}
}

func (v NullableBatchBroadcastResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchBroadcastResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
