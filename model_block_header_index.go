/*
 * MicrovisionChain API Document
 *
 * API definition for MicrovisionChain provided apis
 *
 * API version: 3.0.9
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvcapi

import (
	"encoding/json"
)

// BlockHeaderIndex Detailed block header info.
type BlockHeaderIndex struct {
	// Block hash.
	BlockHash *string `json:"blockHash,omitempty"`
	// Block height.
	Height *int64 `json:"height,omitempty"`
	// Block version.
	Version *int64 `json:"version,omitempty"`
	// The block hash of the previous block.
	PrevBlockHash *string `json:"prevBlockHash,omitempty"`
	// Hex formatted block merkle root.
	MerkleRoot *string `json:"merkleRoot,omitempty"`
	// Block timestamp.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// Block median timestamp.
	MedianTime *int64 `json:"medianTime,omitempty"`
	// Miner total rewards, including miner fee.
	Reward *int64 `json:"reward,omitempty"`
	// Guessed miner name.
	Miner *string `json:"miner,omitempty"`
	// Miner address that received rewards.
	MinerAddress *string `json:"minerAddress,omitempty"`
	// Total txs count included in the block.
	TxCount *int32 `json:"txCount,omitempty"`
	// Total input count in the block.
	InputCount *int32 `json:"inputCount,omitempty"`
	// Total output count in the block
	OutputCount *int32 `json:"outputCount,omitempty"`
	// Size of the block
	Size *int64 `json:"size,omitempty"`
	// Target bits.
	Bits *int64 `json:"bits,omitempty"`
	// Block nonce
	Nonce *int64 `json:"nonce,omitempty"`
	// Hex formated coinbase info.
	Coinbase *string `json:"coinbase,omitempty"`
}

// NewBlockHeaderIndex instantiates a new BlockHeaderIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockHeaderIndex() *BlockHeaderIndex {
	this := BlockHeaderIndex{}
	return &this
}

// NewBlockHeaderIndexWithDefaults instantiates a new BlockHeaderIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockHeaderIndexWithDefaults() *BlockHeaderIndex {
	this := BlockHeaderIndex{}
	return &this
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetBlockHash() string {
	if o == nil || o.BlockHash == nil {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetBlockHashOk() (*string, bool) {
	if o == nil || o.BlockHash == nil {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasBlockHash() bool {
	if o != nil && o.BlockHash != nil {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *BlockHeaderIndex) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetHeight() int64 {
	if o == nil || o.Height == nil {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetHeightOk() (*int64, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *BlockHeaderIndex) SetHeight(v int64) {
	o.Height = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *BlockHeaderIndex) SetVersion(v int64) {
	o.Version = &v
}

// GetPrevBlockHash returns the PrevBlockHash field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetPrevBlockHash() string {
	if o == nil || o.PrevBlockHash == nil {
		var ret string
		return ret
	}
	return *o.PrevBlockHash
}

// GetPrevBlockHashOk returns a tuple with the PrevBlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetPrevBlockHashOk() (*string, bool) {
	if o == nil || o.PrevBlockHash == nil {
		return nil, false
	}
	return o.PrevBlockHash, true
}

// HasPrevBlockHash returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasPrevBlockHash() bool {
	if o != nil && o.PrevBlockHash != nil {
		return true
	}

	return false
}

// SetPrevBlockHash gets a reference to the given string and assigns it to the PrevBlockHash field.
func (o *BlockHeaderIndex) SetPrevBlockHash(v string) {
	o.PrevBlockHash = &v
}

// GetMerkleRoot returns the MerkleRoot field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetMerkleRoot() string {
	if o == nil || o.MerkleRoot == nil {
		var ret string
		return ret
	}
	return *o.MerkleRoot
}

// GetMerkleRootOk returns a tuple with the MerkleRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetMerkleRootOk() (*string, bool) {
	if o == nil || o.MerkleRoot == nil {
		return nil, false
	}
	return o.MerkleRoot, true
}

// HasMerkleRoot returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasMerkleRoot() bool {
	if o != nil && o.MerkleRoot != nil {
		return true
	}

	return false
}

// SetMerkleRoot gets a reference to the given string and assigns it to the MerkleRoot field.
func (o *BlockHeaderIndex) SetMerkleRoot(v string) {
	o.MerkleRoot = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *BlockHeaderIndex) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetMedianTime returns the MedianTime field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetMedianTime() int64 {
	if o == nil || o.MedianTime == nil {
		var ret int64
		return ret
	}
	return *o.MedianTime
}

// GetMedianTimeOk returns a tuple with the MedianTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetMedianTimeOk() (*int64, bool) {
	if o == nil || o.MedianTime == nil {
		return nil, false
	}
	return o.MedianTime, true
}

// HasMedianTime returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasMedianTime() bool {
	if o != nil && o.MedianTime != nil {
		return true
	}

	return false
}

// SetMedianTime gets a reference to the given int64 and assigns it to the MedianTime field.
func (o *BlockHeaderIndex) SetMedianTime(v int64) {
	o.MedianTime = &v
}

// GetReward returns the Reward field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetReward() int64 {
	if o == nil || o.Reward == nil {
		var ret int64
		return ret
	}
	return *o.Reward
}

// GetRewardOk returns a tuple with the Reward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetRewardOk() (*int64, bool) {
	if o == nil || o.Reward == nil {
		return nil, false
	}
	return o.Reward, true
}

// HasReward returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasReward() bool {
	if o != nil && o.Reward != nil {
		return true
	}

	return false
}

// SetReward gets a reference to the given int64 and assigns it to the Reward field.
func (o *BlockHeaderIndex) SetReward(v int64) {
	o.Reward = &v
}

// GetMiner returns the Miner field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetMiner() string {
	if o == nil || o.Miner == nil {
		var ret string
		return ret
	}
	return *o.Miner
}

// GetMinerOk returns a tuple with the Miner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetMinerOk() (*string, bool) {
	if o == nil || o.Miner == nil {
		return nil, false
	}
	return o.Miner, true
}

// HasMiner returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasMiner() bool {
	if o != nil && o.Miner != nil {
		return true
	}

	return false
}

// SetMiner gets a reference to the given string and assigns it to the Miner field.
func (o *BlockHeaderIndex) SetMiner(v string) {
	o.Miner = &v
}

// GetMinerAddress returns the MinerAddress field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetMinerAddress() string {
	if o == nil || o.MinerAddress == nil {
		var ret string
		return ret
	}
	return *o.MinerAddress
}

// GetMinerAddressOk returns a tuple with the MinerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetMinerAddressOk() (*string, bool) {
	if o == nil || o.MinerAddress == nil {
		return nil, false
	}
	return o.MinerAddress, true
}

// HasMinerAddress returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasMinerAddress() bool {
	if o != nil && o.MinerAddress != nil {
		return true
	}

	return false
}

// SetMinerAddress gets a reference to the given string and assigns it to the MinerAddress field.
func (o *BlockHeaderIndex) SetMinerAddress(v string) {
	o.MinerAddress = &v
}

// GetTxCount returns the TxCount field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetTxCount() int32 {
	if o == nil || o.TxCount == nil {
		var ret int32
		return ret
	}
	return *o.TxCount
}

// GetTxCountOk returns a tuple with the TxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetTxCountOk() (*int32, bool) {
	if o == nil || o.TxCount == nil {
		return nil, false
	}
	return o.TxCount, true
}

// HasTxCount returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasTxCount() bool {
	if o != nil && o.TxCount != nil {
		return true
	}

	return false
}

// SetTxCount gets a reference to the given int32 and assigns it to the TxCount field.
func (o *BlockHeaderIndex) SetTxCount(v int32) {
	o.TxCount = &v
}

// GetInputCount returns the InputCount field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetInputCount() int32 {
	if o == nil || o.InputCount == nil {
		var ret int32
		return ret
	}
	return *o.InputCount
}

// GetInputCountOk returns a tuple with the InputCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetInputCountOk() (*int32, bool) {
	if o == nil || o.InputCount == nil {
		return nil, false
	}
	return o.InputCount, true
}

// HasInputCount returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasInputCount() bool {
	if o != nil && o.InputCount != nil {
		return true
	}

	return false
}

// SetInputCount gets a reference to the given int32 and assigns it to the InputCount field.
func (o *BlockHeaderIndex) SetInputCount(v int32) {
	o.InputCount = &v
}

// GetOutputCount returns the OutputCount field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetOutputCount() int32 {
	if o == nil || o.OutputCount == nil {
		var ret int32
		return ret
	}
	return *o.OutputCount
}

// GetOutputCountOk returns a tuple with the OutputCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetOutputCountOk() (*int32, bool) {
	if o == nil || o.OutputCount == nil {
		return nil, false
	}
	return o.OutputCount, true
}

// HasOutputCount returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasOutputCount() bool {
	if o != nil && o.OutputCount != nil {
		return true
	}

	return false
}

// SetOutputCount gets a reference to the given int32 and assigns it to the OutputCount field.
func (o *BlockHeaderIndex) SetOutputCount(v int32) {
	o.OutputCount = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *BlockHeaderIndex) SetSize(v int64) {
	o.Size = &v
}

// GetBits returns the Bits field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetBits() int64 {
	if o == nil || o.Bits == nil {
		var ret int64
		return ret
	}
	return *o.Bits
}

// GetBitsOk returns a tuple with the Bits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetBitsOk() (*int64, bool) {
	if o == nil || o.Bits == nil {
		return nil, false
	}
	return o.Bits, true
}

// HasBits returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasBits() bool {
	if o != nil && o.Bits != nil {
		return true
	}

	return false
}

// SetBits gets a reference to the given int64 and assigns it to the Bits field.
func (o *BlockHeaderIndex) SetBits(v int64) {
	o.Bits = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetNonce() int64 {
	if o == nil || o.Nonce == nil {
		var ret int64
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetNonceOk() (*int64, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int64 and assigns it to the Nonce field.
func (o *BlockHeaderIndex) SetNonce(v int64) {
	o.Nonce = &v
}

// GetCoinbase returns the Coinbase field value if set, zero value otherwise.
func (o *BlockHeaderIndex) GetCoinbase() string {
	if o == nil || o.Coinbase == nil {
		var ret string
		return ret
	}
	return *o.Coinbase
}

// GetCoinbaseOk returns a tuple with the Coinbase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockHeaderIndex) GetCoinbaseOk() (*string, bool) {
	if o == nil || o.Coinbase == nil {
		return nil, false
	}
	return o.Coinbase, true
}

// HasCoinbase returns a boolean if a field has been set.
func (o *BlockHeaderIndex) HasCoinbase() bool {
	if o != nil && o.Coinbase != nil {
		return true
	}

	return false
}

// SetCoinbase gets a reference to the given string and assigns it to the Coinbase field.
func (o *BlockHeaderIndex) SetCoinbase(v string) {
	o.Coinbase = &v
}

func (o BlockHeaderIndex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlockHash != nil {
		toSerialize["blockHash"] = o.BlockHash
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.PrevBlockHash != nil {
		toSerialize["prevBlockHash"] = o.PrevBlockHash
	}
	if o.MerkleRoot != nil {
		toSerialize["merkleRoot"] = o.MerkleRoot
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.MedianTime != nil {
		toSerialize["medianTime"] = o.MedianTime
	}
	if o.Reward != nil {
		toSerialize["reward"] = o.Reward
	}
	if o.Miner != nil {
		toSerialize["miner"] = o.Miner
	}
	if o.MinerAddress != nil {
		toSerialize["minerAddress"] = o.MinerAddress
	}
	if o.TxCount != nil {
		toSerialize["txCount"] = o.TxCount
	}
	if o.InputCount != nil {
		toSerialize["inputCount"] = o.InputCount
	}
	if o.OutputCount != nil {
		toSerialize["outputCount"] = o.OutputCount
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Bits != nil {
		toSerialize["bits"] = o.Bits
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.Coinbase != nil {
		toSerialize["coinbase"] = o.Coinbase
	}
	return json.Marshal(toSerialize)
}

type NullableBlockHeaderIndex struct {
	value *BlockHeaderIndex
	isSet bool
}

func (v NullableBlockHeaderIndex) Get() *BlockHeaderIndex {
	return v.value
}

func (v *NullableBlockHeaderIndex) Set(val *BlockHeaderIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockHeaderIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockHeaderIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockHeaderIndex(val *BlockHeaderIndex) *NullableBlockHeaderIndex {
	return &NullableBlockHeaderIndex{value: val, isSet: true}
}

func (v NullableBlockHeaderIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockHeaderIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
